// Generated by gencpp from file yolov2_ros/ObjectLocation.msg
// DO NOT EDIT!


#ifndef YOLOV2_ROS_MESSAGE_OBJECTLOCATION_H
#define YOLOV2_ROS_MESSAGE_OBJECTLOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace yolov2_ros
{
template <class ContainerAllocator>
struct ObjectLocation_
{
  typedef ObjectLocation_<ContainerAllocator> Type;

  ObjectLocation_()
    : header()
    , x_center(0)
    , y_center(0)
    , distance(0.0)
    , bearing(0.0)
    , true_range(0.0)
    , key()  {
    }
  ObjectLocation_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x_center(0)
    , y_center(0)
    , distance(0.0)
    , bearing(0.0)
    , true_range(0.0)
    , key(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _x_center_type;
  _x_center_type x_center;

   typedef int32_t _y_center_type;
  _y_center_type y_center;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _bearing_type;
  _bearing_type bearing;

   typedef double _true_range_type;
  _true_range_type true_range;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _key_type;
  _key_type key;





  typedef boost::shared_ptr< ::yolov2_ros::ObjectLocation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov2_ros::ObjectLocation_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectLocation_

typedef ::yolov2_ros::ObjectLocation_<std::allocator<void> > ObjectLocation;

typedef boost::shared_ptr< ::yolov2_ros::ObjectLocation > ObjectLocationPtr;
typedef boost::shared_ptr< ::yolov2_ros::ObjectLocation const> ObjectLocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov2_ros::ObjectLocation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov2_ros::ObjectLocation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yolov2_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'vision_msgs': ['/home/diggerdata/catkin_wpirm/src/vision_msgs/msg'], 'yolov2_ros': ['/home/diggerdata/catkin_wpirm/src/yolov2_ros/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yolov2_ros::ObjectLocation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov2_ros::ObjectLocation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov2_ros::ObjectLocation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov2_ros::ObjectLocation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov2_ros::ObjectLocation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov2_ros::ObjectLocation_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov2_ros::ObjectLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae191473540928878a4478822d1a5e8b";
  }

  static const char* value(const ::yolov2_ros::ObjectLocation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae19147354092887ULL;
  static const uint64_t static_value2 = 0x8a4478822d1a5e8bULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov2_ros::ObjectLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov2_ros/ObjectLocation";
  }

  static const char* value(const ::yolov2_ros::ObjectLocation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov2_ros::ObjectLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Header\n\
Header header\n\
\n\
# Detection object center\n\
int32 x_center\n\
int32 y_center\n\
\n\
# Distance from the object\n\
float64 distance\n\
\n\
# Bearing of the TurtleBot\n\
float64 bearing\n\
\n\
# True range from the object\n\
float64 true_range\n\
\n\
# The object\n\
string key\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::yolov2_ros::ObjectLocation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov2_ros::ObjectLocation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x_center);
      stream.next(m.y_center);
      stream.next(m.distance);
      stream.next(m.bearing);
      stream.next(m.true_range);
      stream.next(m.key);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectLocation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov2_ros::ObjectLocation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov2_ros::ObjectLocation_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x_center: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_center);
    s << indent << "y_center: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_center);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "bearing: ";
    Printer<double>::stream(s, indent + "  ", v.bearing);
    s << indent << "true_range: ";
    Printer<double>::stream(s, indent + "  ", v.true_range);
    s << indent << "key: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.key);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV2_ROS_MESSAGE_OBJECTLOCATION_H
